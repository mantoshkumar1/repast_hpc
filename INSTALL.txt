==============================================================================
Repast HPC 2.1  Installation

Release Date: 05 May 2015
==============================================================================


There are multiple, alternative ways to install Repast HPC. You will
find in the text below:

	1) An overview of 'What is installed' with Repast HPC
	2) A list of requirements for a Repast HPC installation
	3) An overview of the 2 methods of installing Repast HPC
	4) Step-by-step instructions for all two methods
    5) Instructions for compiling RepastHPC as static libraries

Read each section carefully to choose the method that is right for your situation.


----------------------------------------------------------------------------
What is installed:

A complete installation of Repast HPC consists of:

	1) A collection of 'include' files, and
	2) Two 'library' files- one for RepastHPC and one for the ReLogo extensions

The 'include' files are header files (with a '.h' extenstion) that
must be 'included' in applications that wish to use Repast HPC. The library
files contain the executable functions that a RepastHPC application will use.

The RepastHPC package also includes some demonstration applications.
These are not needed to use RepastHPC, but are built as part of the
automated installation. They are intended to serve as examples for
how a RepastHPC simulation can be written, compiled, and run.


----------------------------------------------------------------------------
RepastHPC Dependencies and Requirements:

RepastHPC relies on a collection of tools and libraries. Note that some
of the installation procedures discussed here will install (or will give
you the option to install) some or all of these required tools and libraries,
if they are not already found on your system.

The requirements include:

	1) A C++ compiler
	2) A 'make' utility
	3) An MPI implementation
	4) The NetCDF library (C and C++ versions)
	5) The CURL library
	6) Four of the Boost libraries (serialization, system, filesystem, and mpi), 
              plus header-only libraries


----------------------------------------------------------------------------
Methods of installation:

There are three methods of installation provided:

	1) Unix/Linux/Mac OSX standard installation
	2) VirtualBox Virtual Machine

Note that Windows users musst use option #2. Unix/Linux/Mac OSX
can also install the virtual machine but can also perform the
standard installation.

Unix/Linux/MacOSX standard installation: 
The most typical OS for high-performance computing systems is a Unix or Linux-like
system; the Mac OSX system is very similar. Installation on these
systems means compiling the RepastHPC libraries, copying them to a convenient
location, and copying the collection of header files to a convenient location.

For installation via this method, the existence of a C++ compiler is assumed.
The installation provided here includes means to build the other required
elements.

VirtualBox Virtual Machine: 
A virtual machine provides the simplest method for installing Repast HPC. 
Any user with VirtualBox running on his or her machine can import the RepastHPC 
VM and begin using Repast HPC right away.


----------------------------------------------------------------------------
Unix/Linux/MacOSX standard installation: 

General notes:
Installing and using Repast HPC requires the existence on your system
of several prerequisite components, including both tools and libraries.
The instructions and tools below show how you can determine whether these tools and
libraries exist on your system, and install them if they are not present.
One important caveat: standard installation places the tools and libraries
in common directories where they can be used by other applications; the
instructions and tools below will show you how to determine if these have
been installed in the standard places. Your system may be arranged
differently, and the libraries and tools may be in non-standard places.
Also, the automated tools below will install things within the Repast HPC
directory, and will not move them to these standard places to be available
for other applications. Advanced users may wish to customize the installation
to place these tools at the standard (or other) locations.

Requirement #1: A C++ Compiler
To install in a Unix/Linx/MacOSX environment you must first have a C++
compiler installed. If you do not have a C++ compiler, consult your system's
documentation or your system administrator.

(A common C++ compiler is g++; you can determine if you have gcc installed by
typing:

g++ -v

If g++ is installed and is on the execution path, this will give you version
information.)

RHPC uses some C++ features introduced with c++11. Consequently, the 
C++ compiler must be C++ 11 compliant. The clang and gcc based compilers
shipping with OSX and Linux distributions are C++ 11 compliant.


Requirement #2: A 'make' utility

"make" is a utility that manages dependencies. Often compiling code depends
on compiled versions of other code; make can detect when versions change and
re-compile only the elements that need to be changed in order for the whole
collection to be current. It can also be used to automate a wide array of other
operations (copying files, etc.).

To confirm that make is installed on your system and is on the execute path,
navigate to an EMPTY directory and type:

make

If a message like 'make: *** No targets specified and no makefile found.  Stop.'
is the response, then make is installed.

If no 'make' is installed, you must install it; consult your system's documentation,
http://www.gnu.org/software/make/, and/or your system administrator.


Requirement #3: The curl library
"curl" is a library that is required for Repast HPC to compile correctly. You can
install curl using a variety of methods. The install script included with
Repast HPC can also be used. To do this, navigate the INSTALLATION directory in
a command shell and type:

./install.sh curl

This will place the curl library in the 'ext' directory under the Repast HPC 
installation.

Requirement #4: An MPI implementation

Repast HPC requires an MPI implementation. In high-performance systems
this will be central to the system and will be managed by the system
administrator. On personal systems it may be available. Commonly the command:

mpicxx

will invoke the MPI compiler, if MPI has been fully installed. You can determine
more about your MPI installation by using the command:

which mpicxx

If you do not have an MPI implementation installed, you can choose among
several available options (e.g., openMPI, LAM/MPI, or MPICH).

If MPI is not already installed on your system and you wish to use MPICH
from the Repast HPC distribution, you can open a command prompt and:

1) Navigate to the 'INSTALLATION' directory of the Repast HPC download.
2) Use:

./install.sh mpich

This will execute the 'install' shell script and will install MPICH 3 on your system
under the Repast HPC directories, under /ext/MPICH

A useful thing to do after this installation is to add the current mpich installation 
to the execution path. The command:

  export PATH=$PWD/../ext/MPICH/bin/:$PATH

is executed. This will probably not permanently change the path variable; each time you
log out and back in to your command shell the variable will be re-set. To address this
you can add a command like:

PATH=X/MPICH/bin/:$PATH

to your ~/.profile file, so that it will be executed each time you log in,
where X is the path to repast_hpc-2.1.0/ext directory.


Requirement #5: NetCDF

Repast HPC requires NetCDF 4.2.1 and NetCDF C++ 4.2. If these are installed in your
system you should find the corresponding lib and include files in the standard locations.
The libraries are typically named libnetcdf.a and libnetcdf_c++.a.

If you do not have these installed, you can:

1) Navigate to the INSTALLATION directory of the Repast HPC download.
2) Use:

./install.sh netcdf-netcpp

This will install both the netcdf and netcdf cpp libraries to the 'ext' folder. Note that 
these are not the current versions of the netcdf libraries; netcdf has undergone an upgrade 
that is not currently supported in RepastHPC.

The includes and the libraries will be soft linked to ext/include and ext/lib for convenience.


Requirement #6: Boost

Repast HPC requires the Boost library, a set of extensions to C++ available from
www.boost.org. Boost's libraries come in two varieties: some are 'header-only', and
can be used simply by including them. The others are compiled. Repast HPC requires four
of the compiled libraries: serialization, system, filesystem, and mpi. (The boost 'mpi'
library is not to be confused with an MPI implementation like MPICH.)

The recommended version of Boost to be used is 1.58, but earlier versions may work as well,
back to 1.48; versions earlier than 1.48 are known to be incompatible.

If you do not have a version of Boost installed, you can:

1) Navigate to the INSTALLATION directory of the Repast HPC download
2) Edit the 'install.sh' script to make the "MPI_COMPILER_INVOCATION' variable (line 3)
     correctly invoke your MPI implementation. Generally this will be 'mpicxx' 
     (possibly including a full path)
3) Use:

./install.sh boost

This will install the boost libraries (version 1.58) under the Repast HPC directory, ext/boost.
The includes and the libraries will be soft linked to ext/include and ext/lib for convenience.

Installing Repast HPC:

If you have installed everything to the default locations using the install.sh script, you
can also use the install.sh scrip to build Repast HPC. To do this, use:

./install.sh rhpc

This will create dynamic libraries for repast_hpc and the relogo extensions. The
libraries will be in ext/lib.


To install Repast HPC without using the install script, you must manually edit the 
'Makefile' under the INSTALLATION directory. The first lines of this file should give 
the locations of the required libraries described above;
you should modify these lines so that the values used are correct. What is provided
below is an example only. 


# VARIABLES (Supply values for these; for definitions and examples, see INSTALL)
CXX=/usr/local/bin/mpicxx
CXXLD=/usr/local/bin/mpicxx
BOOST_INCLUDE_DIR=/Users/murphy/RHPC_2.1/ext/Boost/boost_1_58/
BOOST_LIB_DIR=/Users/murphy//RHPC_2.1/ext/Boost/boost_1_58/stage/lib/
BOOST_INFIX=-mt
NETCDF_INCLUDE_DIR=/usr/local/include/
NETCDF_LIB_DIR=/usr/local/lib/
CURL_INCLUDE_DIR=/usr/local/include/
CURL_LIB_DIR=/usr/local/lib/


Note that the 'BOOST_INFIX' value should represent any characters that boost's installation
has placed in the names of the files it created, between the library name and the extension. 
For example, if the boost serialization library is named libboost_serialization-mt.so, 
then the value for the 'infix' would be '-mt'. 

For all 'include' and 'lib' directories, simply insert the appropriate path with the corresponding variable.

Make sure that the CXX and CXXLD variables are correctly set. These should point to your
mpi compiler (generally both will be 'mpicxx', but the full path to the MPI wrapper compiler can be 
used if needed).

When this is done, navigate in a shell to the Repast HPC 'INSTALLATION' directory and type

make -f Makefile all

This will build the libraries for Repast HPC and Relogo, and place these in ext/lib directory; it
will also copy the relevant include files to the /include directory. It will then build
the 'Zombies' and 'Rumor Model' demos, and place these in the ext/bin directory.

You can run the Zombies and Rumor models demos by cd'ing to the ext/bin directory.

Zombies:
LD_LIBRARY_PATH=../lib mpirun -n 4 ./zombie_model zombie_config.props zombie_model.props
!!! If you are on OSX, replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH !!!

Rumor:
LD_LIBRARY_PATH=../lib mpirun -n 4 ./rumor_model rumor_config.props rumor_model.props
!!! If you are on OSX, replace LD_LIBRARY_PATH with DYLD_LIBRARY_PATH !!!

The LD_LIBRARY_PATH or DYLD_LIBRARY_PATH is necessary because the various boost, repast hpc
 libraries have been installed in a non-default location and the LD_LIBRARY_PATH / DYLD_LIBRARY_PATH 
environment variables are needed so that they can be found when running any repast hpc applications.


----------------------------------------------------------------------------
VirtualBox Virtual Machine: 

The RepastHPC Virtual Box VM is a separate download; see the downloads
sectio of the Repast site for details.

http://repast.sourceforge.net/download.php

Once downloaded, simply import the appliance and start it. The username and password
are both "repasthpc". The Virtual Machine is to use 4096MB of memory and two processors.
Consequently, your machine must have sufficient memory to run both Windows and
the virtual machine. If this is not the case, lower the amount of memory in the
virtual machine settings. You may also get error about VT-x/AMD-v not being 
enabled. You can enable these in the bios of your laptop / desktop. Or, you can
start the virtual machine again and try to run without it.

If the display is too small, you need to install the "Guest Additions". With
the virtual machine running, click on the devices menu in its toolbar and 
select "Insert Guest Additions CD Image" and follow the prompts from there.

Repast HPC and its required libraries have already been 
installed into /usr/local/lib and /usr/local/include. There is no additional install
necessary. The repast hpc source can be found in ~/repast_hpc-2.1.0/src.

The RepastHPC Virtual Box VM is an Ubuntu 14.04 Linux distribution. More info can
be found at the Ubuntu site as well as around the web via google.

-----------------------------------------------------------------------------
Compiling as static libraries

By default the installation using install.sh and the Makefile will compile
the repast hpc libraries as dynamic shared libraries. If you need compile
them as static libraries, for example, if your cluster or HPC setup expects
static libraries, you will need to do the following:

1) Use the MPI that is installed on your cluster / HPC machine, and NOT
the one bundled with this distribution and mentioned above.

2) Set the STATIC variable in the Makefile to true:
	STATIC = true
3) make all


