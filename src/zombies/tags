!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AGENTPACKAGE_H	AgentPackage.h	43;"	d
AgentPackage	AgentPackage.h	/^struct AgentPackage {$/;"	s
CountHumansOnPatch	Zombie.cpp	/^struct CountHumansOnPatch {$/;"	s	file:
CountZombiesOnPatch	Human.cpp	/^struct CountZombiesOnPatch {$/;"	s	file:
HUMAN_COUNT_PROP	ZombieObserver.cpp	/^const string HUMAN_COUNT_PROP = "human.count";$/;"	v
HUMAN_H_	Human.h	42;"	d
Human	Human.h	/^	Human(repast::AgentId id, repast::relogo::Observer* obs): repast::relogo::Turtle(id, obs), _infected(false), _infectionTime(0) {}$/;"	f	class:Human
Human	Human.h	/^	Human(repast::AgentId id, repast::relogo::Observer* obs, const AgentPackage& package): repast::relogo::Turtle(id, obs), _infected(package.infected),$/;"	f	class:Human
Human	Human.h	/^class Human : public repast::relogo::Turtle {$/;"	c
INFECTIONSUM_H_	InfectionSum.h	42;"	d
InfectionSum	InfectionSum.cpp	/^InfectionSum::InfectionSum(ZombieObserver* zobs) : obs(zobs){}$/;"	f	class:InfectionSum
InfectionSum	InfectionSum.h	/^class InfectionSum: public repast::TDataSource<int> {$/;"	c
SOURCES	module.mk	/^SOURCES = main.cpp \\$/;"	m
ZOMBIEOBSERVER_H_	ZombieObserver.h	42;"	d
ZOMBIE_COUNT_PROP	ZombieObserver.cpp	/^const string ZOMBIE_COUNT_PROP = "zombie.count";$/;"	v
ZOMBIE_H_	Zombie.h	42;"	d
Zombie	Zombie.h	/^	Zombie(repast::AgentId id, repast::relogo::Observer* obs) : repast::relogo::Turtle(id, obs) {}$/;"	f	class:Zombie
Zombie	Zombie.h	/^class Zombie : public repast::relogo::Turtle {$/;"	c
ZombieObserver	ZombieObserver.h	/^	ZombieObserver() : _infectionCount(0) {}$/;"	f	class:ZombieObserver
ZombieObserver	ZombieObserver.h	/^class ZombieObserver : public repast::relogo::Observer {$/;"	c
_infected	Human.h	/^	bool _infected;$/;"	m	class:Human
_infectionCount	ZombieObserver.h	/^	int _infectionCount;$/;"	m	class:ZombieObserver
_infectionTime	Human.h	/^	int _infectionTime;$/;"	m	class:Human
createAgent	ZombieObserver.cpp	/^RelogoAgent* ZombieObserver::createAgent(const AgentPackage& content) {$/;"	f	class:ZombieObserver
createAgents	ZombieObserver.cpp	/^void ZombieObserver::createAgents(std::vector<AgentPackage>& contents, std::vector<RelogoAgent*>& out) {$/;"	f	class:ZombieObserver
currentProc	AgentPackage.h	/^	int id, proc, type, currentProc;$/;"	m	struct:AgentPackage
getData	InfectionSum.cpp	/^int InfectionSum::getData() {$/;"	f	class:InfectionSum
getId	AgentPackage.h	/^	repast::AgentId getId() const {$/;"	f	struct:AgentPackage
go	ZombieObserver.cpp	/^void ZombieObserver::go() {$/;"	f	class:ZombieObserver
humanType	ZombieObserver.h	/^	int zombieType, humanType;$/;"	m	class:ZombieObserver
id	AgentPackage.h	/^	int id, proc, type, currentProc;$/;"	m	struct:AgentPackage
incrementInfectionCount	ZombieObserver.h	/^	void incrementInfectionCount() {$/;"	f	class:ZombieObserver
infect	Human.cpp	/^void Human::infect() {$/;"	f	class:Human
infect	Zombie.cpp	/^  void Zombie::infect(Human* human) {$/;"	f	class:Zombie
infected	AgentPackage.h	/^	bool infected;$/;"	m	struct:AgentPackage
infected	Human.h	/^	bool infected() const {$/;"	f	class:Human
infectionCount	ZombieObserver.h	/^	int infectionCount() const {$/;"	f	class:ZombieObserver
infectionTime	AgentPackage.h	/^	int infectionTime;$/;"	m	struct:AgentPackage
infectionTime	Human.h	/^	int infectionTime() const {$/;"	f	class:Human
local_dir	module.mk	/^local_dir := zombies$/;"	m
local_src	module.mk	/^local_src := $(addprefix $(local_dir)\/, $(SOURCES))$/;"	m
main	main.cpp	/^int main(int argc, char **argv) {$/;"	f
obs	InfectionSum.h	/^	ZombieObserver* obs;$/;"	m	class:InfectionSum
operator ()	Human.cpp	/^	double operator()(const Patch* patch) const {$/;"	f	struct:CountZombiesOnPatch
operator ()	Zombie.cpp	/^	double operator()(const Patch* patch) const {$/;"	f	struct:CountHumansOnPatch
proc	AgentPackage.h	/^	int id, proc, type, currentProc;$/;"	m	struct:AgentPackage
props	ZombieObserver.h	/^	repast::Properties props;$/;"	m	class:ZombieObserver
provideContent	ZombieObserver.cpp	/^void ZombieObserver::provideContent(RelogoAgent* agent, std::vector<AgentPackage>& out) {$/;"	f	class:ZombieObserver
provideContent	ZombieObserver.cpp	/^void ZombieObserver::provideContent(const repast::AgentRequest& request, std::vector<AgentPackage>& out) {$/;"	f	class:ZombieObserver
runZombies	main.cpp	/^void runZombies(std::string propsFile, int argc, char ** argv) {$/;"	f
serialize	AgentPackage.h	/^	void serialize(Archive& ar, const unsigned int version) {$/;"	f	struct:AgentPackage
set	Human.h	/^  void set(bool infected, int infectionTime){$/;"	f	class:Human
setup	ZombieObserver.cpp	/^void ZombieObserver::setup(Properties& props) {$/;"	f	class:ZombieObserver
step	Human.cpp	/^void Human::step() {$/;"	f	class:Human
step	Zombie.cpp	/^void Zombie::step() {$/;"	f	class:Zombie
type	AgentPackage.h	/^	int id, proc, type, currentProc;$/;"	m	struct:AgentPackage
updateAgent	ZombieObserver.cpp	/^void ZombieObserver::updateAgent(AgentPackage package){$/;"	f	class:ZombieObserver
usage	main.cpp	/^void usage() {$/;"	f
zombieType	ZombieObserver.h	/^	int zombieType, humanType;$/;"	m	class:ZombieObserver
~Human	Human.h	/^	virtual ~Human() {}$/;"	f	class:Human
~InfectionSum	InfectionSum.cpp	/^InfectionSum::~InfectionSum() {}$/;"	f	class:InfectionSum
~Zombie	Zombie.h	/^	virtual ~Zombie() {}$/;"	f	class:Zombie
~ZombieObserver	ZombieObserver.h	/^	virtual ~ZombieObserver() {}$/;"	f	class:ZombieObserver
